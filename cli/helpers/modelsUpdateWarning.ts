import { exists } from "fs-extra";
import { readdir } from "fs/promises";
import inquirer from "inquirer";
import { cleanupFileNames } from "~/utils/index.js";
import { logger } from "~/utils/logger.js";
import { generateTransientAssets } from "./manageTransientAssets.js";

export default async function modelUpdateWarning(appPath: string, apiSpecPath: string, mongoose: boolean) {
  if (!(await exists(appPath))) {
    logger.error(`Couldn't find project at: ${appPath}`);
    process.exit(1);
  }

  const projectHasInterfaces = await exists(`${appPath}/app/interfaces`);
  const projectHasModels = await exists(`${appPath}/app/models`);

  if (!projectHasInterfaces && (Boolean(mongoose) ? !projectHasModels : false)) {
    console.log({ projectHasInterfaces, projectHasModels, appPath });

    logger.warn("Provided project doesn't seems to be generated by 'oats'");
    process.exit(1);
  }

  const outputStore = await generateTransientAssets(apiSpecPath);

  const incomingUpdatedModels = cleanupFileNames(await readdir(`${outputStore}/models`, { encoding: "utf-8" }));

  const existingInterfaces = cleanupFileNames(await readdir(`${appPath}/app/interfaces`, { encoding: "utf-8" }));
  const existingModels = cleanupFileNames(await readdir(`${appPath}/app/models`, { encoding: "utf-8" }));

  const conflictingInterfaces = incomingUpdatedModels.filter((model) => existingInterfaces.includes(model));
  const conflictingModels = incomingUpdatedModels.filter((model) => existingModels.includes(model));

  const conflicts = conflictingInterfaces.length + (mongoose ? conflictingModels.length : 0);
  if (Boolean(conflicts)) {
    logger.warn(`${conflicts} Conflicts found!`);
    logger.disabled(` - ${conflictingInterfaces.length} interfaces`);
    if (mongoose) logger.disabled(` - ${conflictingModels.length} mongoose models`);
  }

  const { updateModels } = await inquirer.prompt<{ updateModels: boolean }>({
    name: "updateModels",
    type: "confirm",
    message: `Do you wish to move ahead with the update? `,
    suffix: "This is will overwrite content in existing files",
    default: false,
  });

  if (updateModels) return outputStore;

  return logger.info("Aborting update...");
}

/**
 * 2 flags
 * --update [dirname]
 * --ignore-tree -it | people can rename their projects folders
 * --overwrite -o
 */
